{"id":"../shaderAround/vertex.glsl","dependencies":[{"name":"/Users/bho/Desktop/creativeCoding/HW01_ART_WITH_AI/package.json","includedInParent":true,"mtime":1653787834071}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nuniform float time;\\nvarying vec2 vUv;\\nvarying vec3 vPosition;\\nuniform vec2 pixels;\\nvarying vec3 vLayering0;\\nvarying vec3 vLayering1;\\nvarying vec3 vLayering2;\\nvarying vec3 eyeVector;\\nvarying vec3 vNormal;\\n\\nmat2 rotate(float a){\\n  float s = sin(a);\\n  float c = cos(a);\\n  return mat2(c, -s, s, c);\\n}\\n\\nfloat PI = 3.141592653589793238;\\nvoid main() {\\n\\n  vNormal = normal; \\n\\n  vec4 worldPosition = modelViewMatrix * vec4(position, 1.0);\\n  eyeVector = normalize(worldPosition.xyz - cameraPosition); \\n\\n  float t = time * 0.002;\\n  mat2 rot = rotate(t);\\n\\n  vec3 p0 = position;\\n  p0.yz = rot*p0.yz;\\n  vLayering0 = p0;\\n\\n  mat2 rot1 = rotate(t + 10.);\\n  vec3 p1 = position;\\n  p1.xz = rot1*p1.xz;\\n  vLayering1 = p1;\\n\\n  mat2 rot2 = rotate(t + 30.);\\n  vec3 p2 = position;\\n  p2.xy = rot2*p2.xy;\\n  vLayering2 = p2;\\n\\n  vPosition = position;\\n  vUv = uv;\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"../shaderAround/vertex.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"../shaderAround/vertex.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"../shaderAround/vertex.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"../shaderAround/vertex.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"../shaderAround/vertex.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":992},"source":"../shaderAround/vertex.glsl","original":{"line":1,"column":0}}],"sources":{"../shaderAround/vertex.glsl":"module.exports=\"#define GLSLIFY 1\\nuniform float time;\\nvarying vec2 vUv;\\nvarying vec3 vPosition;\\nuniform vec2 pixels;\\nvarying vec3 vLayering0;\\nvarying vec3 vLayering1;\\nvarying vec3 vLayering2;\\nvarying vec3 eyeVector;\\nvarying vec3 vNormal;\\n\\nmat2 rotate(float a){\\n  float s = sin(a);\\n  float c = cos(a);\\n  return mat2(c, -s, s, c);\\n}\\n\\nfloat PI = 3.141592653589793238;\\nvoid main() {\\n\\n  vNormal = normal; \\n\\n  vec4 worldPosition = modelViewMatrix * vec4(position, 1.0);\\n  eyeVector = normalize(worldPosition.xyz - cameraPosition); \\n\\n  float t = time * 0.002;\\n  mat2 rot = rotate(t);\\n\\n  vec3 p0 = position;\\n  p0.yz = rot*p0.yz;\\n  vLayering0 = p0;\\n\\n  mat2 rot1 = rotate(t + 10.);\\n  vec3 p1 = position;\\n  p1.xz = rot1*p1.xz;\\n  vLayering1 = p1;\\n\\n  mat2 rot2 = rotate(t + 30.);\\n  vec3 p2 = position;\\n  p2.xy = rot2*p2.xy;\\n  vLayering2 = p2;\\n\\n  vPosition = position;\\n  vUv = uv;\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\\n}\";"},"lineCount":null}},"error":null,"hash":"2fc89c28ba5848233903e9f4b134577e","cacheData":{"env":{}}}