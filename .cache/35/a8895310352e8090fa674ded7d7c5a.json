{"id":"../shader/fragment.glsl","dependencies":[{"name":"/Users/bho/Desktop/creativeCoding/HW01_ART_WITH_AI/package.json","includedInParent":true,"mtime":1653787834071}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nuniform float time;\\nuniform float progress;\\nuniform sampler2D texture1;\\nuniform vec4 resolution;\\nvarying vec2 vUv;\\nvarying vec3 vPosition;\\nfloat PI = 3.141592653589793238;\\n//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex\\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec4 mod289(vec4 x) {\\nreturn x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nfloat mod289(float x) {\\nreturn x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute(vec4 x) {\\nreturn mod289(((x*34.0)+1.0)*x);\\n}\\n\\nfloat permute(float x) {\\nreturn mod289(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\nreturn 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat taylorInvSqrt(float r)\\n{\\nreturn 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nvec4 grad4(float j, vec4 ip)\\n{\\nconst vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\\nvec4 p,s;\\n\\np.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\\np.w = 1.5 - dot(abs(p.xyz), ones.xyz);\\ns = vec4(lessThan(p, vec4(0.0)));\\np.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\\n\\nreturn p;\\n}\\n\\n// (sqrt(5) - 1)/4 = F4, used once below\\n#define F4 0.309016994374947451\\n\\nfloat snoise(vec4 v)\\n{\\nconst vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\\n0.276393202250021,  // 2 * G4\\n0.414589803375032,  // 3 * G4\\n-0.447213595499958); // -1 + 4 * G4\\n\\n// First corner\\nvec4 i  = floor(v + dot(v, vec4(F4)) );\\nvec4 x0 = v -   i + dot(i, C.xxxx);\\n\\n// Other corners\\n\\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\\nvec4 i0;\\nvec3 isX = step( x0.yzw, x0.xxx );\\nvec3 isYZ = step( x0.zww, x0.yyz );\\n//  i0.x = dot( isX, vec3( 1.0 ) );\\ni0.x = isX.x + isX.y + isX.z;\\ni0.yzw = 1.0 - isX;\\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\\ni0.y += isYZ.x + isYZ.y;\\ni0.zw += 1.0 - isYZ.xy;\\ni0.z += isYZ.z;\\ni0.w += 1.0 - isYZ.z;\\n\\n// i0 now contains the unique values 0,1,2,3 in each channel\\nvec4 i3 = clamp( i0, 0.0, 1.0 );\\nvec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\\nvec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\\n\\n//  x0 = x0 - 0.0 + 0.0 * C.xxxx\\n//  x1 = x0 - i1  + 1.0 * C.xxxx\\n//  x2 = x0 - i2  + 2.0 * C.xxxx\\n//  x3 = x0 - i3  + 3.0 * C.xxxx\\n//  x4 = x0 - 1.0 + 4.0 * C.xxxx\\nvec4 x1 = x0 - i1 + C.xxxx;\\nvec4 x2 = x0 - i2 + C.yyyy;\\nvec4 x3 = x0 - i3 + C.zzzz;\\nvec4 x4 = x0 + C.wwww;\\n\\n// Permutations\\ni = mod289(i);\\nfloat j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\\nvec4 j1 = permute( permute( permute( permute (\\ni.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\\n+ i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\\n+ i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\\n+ i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\\n\\n// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\\nvec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\\n\\nvec4 p0 = grad4(j0,   ip);\\nvec4 p1 = grad4(j1.x, ip);\\nvec4 p2 = grad4(j1.y, ip);\\nvec4 p3 = grad4(j1.z, ip);\\nvec4 p4 = grad4(j1.w, ip);\\n\\n// Normalise gradients\\nvec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\np0 *= norm.x;\\np1 *= norm.y;\\np2 *= norm.z;\\np3 *= norm.w;\\np4 *= taylorInvSqrt(dot(p4,p4));\\n\\n// Mix contributions from the five corners\\nvec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\\nvec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\\nm0 = m0 * m0;\\nm1 = m1 * m1;\\nreturn 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\\n+ dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\\n\\n}\\n\\n//layering\\nfloat fbm(vec4 p){\\n\\tfloat sum = 0.;\\n\\tfloat amp = 1.;\\n\\tfloat scale = 1.;\\n\\tfor(int i = 0; i < 6; i++){\\n\\t\\tsum += snoise(p * scale) * amp;\\n\\n\\t\\t//we need to offset or augment the p value or else we're adding the same slice of noise over and over\\n\\t\\t//adding 100 to time value each loop\\n\\t\\tp.w += 100.;\\n\\n\\t\\t//every loop amp gets smaller and scale gets bigger \\n\\t\\tamp *= 0.9;\\n\\t\\tscale *= 2.;\\n\\t}\\n\\treturn sum;\\n}\\n\\nvoid main()\\t{\\n\\tvec4 p = vec4(vPosition*3., time * 0.005);\\n\\tfloat noisy = fbm(p);\\n\\n\\tvec4 p1 = vec4(vPosition*2., time * 0.05);\\n\\tfloat spots = max(snoise(p1), 0.);\\n\\t// vec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\\n\\t// gl_FragColor = vec4(vUv,0.0,1.);\\n\\t// gl_FragColor = vec4(noisy);\\n\\tgl_FragColor = vec4(noisy);\\n\\tgl_FragColor *= mix(1.0, spots, 0.7);\\n}\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"../shader/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"../shader/fragment.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"../shader/fragment.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"../shader/fragment.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"../shader/fragment.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":4624},"source":"../shader/fragment.glsl","original":{"line":1,"column":0}}],"sources":{"../shader/fragment.glsl":"module.exports=\"#define GLSLIFY 1\\nuniform float time;\\nuniform float progress;\\nuniform sampler2D texture1;\\nuniform vec4 resolution;\\nvarying vec2 vUv;\\nvarying vec3 vPosition;\\nfloat PI = 3.141592653589793238;\\n//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex\\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : ijm\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//\\n\\nvec4 mod289(vec4 x) {\\nreturn x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nfloat mod289(float x) {\\nreturn x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute(vec4 x) {\\nreturn mod289(((x*34.0)+1.0)*x);\\n}\\n\\nfloat permute(float x) {\\nreturn mod289(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\nreturn 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat taylorInvSqrt(float r)\\n{\\nreturn 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nvec4 grad4(float j, vec4 ip)\\n{\\nconst vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\\nvec4 p,s;\\n\\np.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\\np.w = 1.5 - dot(abs(p.xyz), ones.xyz);\\ns = vec4(lessThan(p, vec4(0.0)));\\np.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www;\\n\\nreturn p;\\n}\\n\\n// (sqrt(5) - 1)/4 = F4, used once below\\n#define F4 0.309016994374947451\\n\\nfloat snoise(vec4 v)\\n{\\nconst vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\\n0.276393202250021,  // 2 * G4\\n0.414589803375032,  // 3 * G4\\n-0.447213595499958); // -1 + 4 * G4\\n\\n// First corner\\nvec4 i  = floor(v + dot(v, vec4(F4)) );\\nvec4 x0 = v -   i + dot(i, C.xxxx);\\n\\n// Other corners\\n\\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\\nvec4 i0;\\nvec3 isX = step( x0.yzw, x0.xxx );\\nvec3 isYZ = step( x0.zww, x0.yyz );\\n//  i0.x = dot( isX, vec3( 1.0 ) );\\ni0.x = isX.x + isX.y + isX.z;\\ni0.yzw = 1.0 - isX;\\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\\ni0.y += isYZ.x + isYZ.y;\\ni0.zw += 1.0 - isYZ.xy;\\ni0.z += isYZ.z;\\ni0.w += 1.0 - isYZ.z;\\n\\n// i0 now contains the unique values 0,1,2,3 in each channel\\nvec4 i3 = clamp( i0, 0.0, 1.0 );\\nvec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\\nvec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\\n\\n//  x0 = x0 - 0.0 + 0.0 * C.xxxx\\n//  x1 = x0 - i1  + 1.0 * C.xxxx\\n//  x2 = x0 - i2  + 2.0 * C.xxxx\\n//  x3 = x0 - i3  + 3.0 * C.xxxx\\n//  x4 = x0 - 1.0 + 4.0 * C.xxxx\\nvec4 x1 = x0 - i1 + C.xxxx;\\nvec4 x2 = x0 - i2 + C.yyyy;\\nvec4 x3 = x0 - i3 + C.zzzz;\\nvec4 x4 = x0 + C.wwww;\\n\\n// Permutations\\ni = mod289(i);\\nfloat j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\\nvec4 j1 = permute( permute( permute( permute (\\ni.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\\n+ i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\\n+ i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\\n+ i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\\n\\n// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\\nvec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\\n\\nvec4 p0 = grad4(j0,   ip);\\nvec4 p1 = grad4(j1.x, ip);\\nvec4 p2 = grad4(j1.y, ip);\\nvec4 p3 = grad4(j1.z, ip);\\nvec4 p4 = grad4(j1.w, ip);\\n\\n// Normalise gradients\\nvec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\np0 *= norm.x;\\np1 *= norm.y;\\np2 *= norm.z;\\np3 *= norm.w;\\np4 *= taylorInvSqrt(dot(p4,p4));\\n\\n// Mix contributions from the five corners\\nvec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\\nvec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\\nm0 = m0 * m0;\\nm1 = m1 * m1;\\nreturn 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\\n+ dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\\n\\n}\\n\\n//layering\\nfloat fbm(vec4 p){\\n\\tfloat sum = 0.;\\n\\tfloat amp = 1.;\\n\\tfloat scale = 1.;\\n\\tfor(int i = 0; i < 6; i++){\\n\\t\\tsum += snoise(p * scale) * amp;\\n\\n\\t\\t//we need to offset or augment the p value or else we're adding the same slice of noise over and over\\n\\t\\t//adding 100 to time value each loop\\n\\t\\tp.w += 100.;\\n\\n\\t\\t//every loop amp gets smaller and scale gets bigger \\n\\t\\tamp *= 0.9;\\n\\t\\tscale *= 2.;\\n\\t}\\n\\treturn sum;\\n}\\n\\nvoid main()\\t{\\n\\tvec4 p = vec4(vPosition*3., time * 0.005);\\n\\tfloat noisy = fbm(p);\\n\\n\\tvec4 p1 = vec4(vPosition*2., time * 0.05);\\n\\tfloat spots = max(snoise(p1), 0.);\\n\\t// vec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\\n\\t// gl_FragColor = vec4(vUv,0.0,1.);\\n\\t// gl_FragColor = vec4(noisy);\\n\\tgl_FragColor = vec4(noisy);\\n\\tgl_FragColor *= mix(1.0, spots, 0.7);\\n}\";"},"lineCount":null}},"error":null,"hash":"31004967f578e3b1867cd589791799fd","cacheData":{"env":{}}}