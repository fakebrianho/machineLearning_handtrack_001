(()=>{"use strict";const e=document.getElementById("myvideo"),n=(document.getElementById("handimage"),document.getElementById("canvas")),t=n.getContext("2d");let o,i,c=document.getElementById("trackbutton"),r=(document.getElementById("nextimagebutton"),document.getElementById("updatenote"),document.getElementById("preload")),a=[],g=!1,s=null;function v(){s.detect(e).then((c=>{a=c.slice(0),c.forEach((n=>{if("face"==n.label){let t=n.bbox[0]+n.bbox[2]/2,c=n.bbox[1]+n.bbox[2]/2,r=t/e.width,a=c/e.height;o=T(r,0,1,-1,1),i=T(a,0,1,-1,1)}})),s.renderPredictions(c,n,t,e),g&&requestAnimationFrame(v)}))}new THREE.Vector2,c.addEventListener("click",(function(){gsap.to(r,{opacity:0,delay:.5,duration:1.5}),g?(handTrack.stopVideo(e),g=!1):handTrack.startVideo(e).then((function(n){e.style.display="none",n&&(g=!0,v())}))})),handTrack.load({flipHorizontal:!0,maxNumBoxes:20,iouThreshold:.5,scoreThreshold:.6}).then((e=>{s=e,console.log(s),c.disabled=!1}));const d=document.querySelector(".threeCanvas"),l=new THREE.Scene,x=new THREE.WebGLRenderer({canvas:d});var y=document.getElementById("texture");let f,m=document.createElement("img");m.onload=function(){y.style.opacity=0,f=new THREE.Texture(this),f.needsUpdate=!0,console.log(f);const e=new THREE.IcosahedronGeometry(10,4),n=new THREE.MeshBasicMaterial({map:f});console.log(f);const t=new THREE.Mesh(e,n);l.add(t)},m.src=y.src,new THREE.TextureLoader;const z=new THREE.AmbientLight(4210752);l.add(z);const u=new THREE.IcosahedronGeometry(10,4),p=new THREE.ShaderMaterial({uniforms:{tExplosion:{type:"t",value:f},uTime:{value:0},uFreq:{value:0}},vertexShader:'uniform float uTime;\nuniform float uFreq;\nvarying vec3 newPos;\nvarying vec2 vUv;\nvarying vec3 vNormal;\nvarying float pulse;\n\n// varying vec2 vUv;\n//\n// GLSL textureless classic 3D noise "cnoise",\n// with an RSL-style periodic variant "pnoise".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/stegu/webgl-noise\n//\n\nvec3 mod289(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x)\n{\n  return mod289(((x*34.0)+10.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\n\n// Classic Perlin noise, periodic variant\nfloat pnoise(vec3 P, vec3 rep)\n{\n  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\n  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\n  Pi0 = mod289(Pi0);\n  Pi1 = mod289(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n  return 2.2 * n_xyz;\n}\nvarying float noise;\n\nfloat turbulence( vec3 p ) {\n\n  float w = 100.0;\n  float t = -.5;\n\n  for (float f = 1.0 ; f <= 10.0 ; f++ ){\n    float power = pow( 2.0, f );\n    t += abs( pnoise( vec3( power * p ), vec3( 10.0, 10.0, 10.0 ) ) / power );\n  }\n\n  return t;\n\n}\n\nvoid main() {\n\n  vUv = uv;\n\n   noise = 10.0 *  -.10 * turbulence( .5 * normal + uTime );\n  float b = 5.0 * pnoise( 0.05 * position + vec3( 2.0 * uTime ), vec3( 100.0 ) );\n  float displacement = - noise + b;\n  // move the position along the normal and transform it\n  vec3 newPosition = position + normal * displacement;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 );\n\n\n}\n',fragmentShader:"uniform float uTime;\nvarying vec3 newPos;\nvarying vec2 vUv;\nvarying float noise;\nuniform sampler2D tExplosion;\n\nfloat random( vec3 scale, float seed ){\n  return fract( sin( dot( gl_FragCoord.xyz + seed, scale ) ) * 43758.5453 + seed ) ;\n}\n\nvoid main() {\n\n  // get a random offset\n  float r = .01 * random( vec3( 12.9898, 78.233, 151.7182 ), 0.0 );\n  // lookup vertically in the texture, using noise and offset\n  // to get the right RGB colour\n//   vec2 tPos = vec2( 0, 1.3 * noise + r );\n  vec4 color = texture2D( tExplosion, vUv );\n//   color = vec4(0.949, 0.0, 0.0, 0.0);\n\n  gl_FragColor = vec4( color.rgb, 1.0 );\n\n}"}),h=new THREE.Mesh(u,p);l.add(h);const P={width:window.innerWidth,height:window.innerHeight},w=new THREE.PerspectiveCamera(75,P.width/P.height,.1,1e3);w.position.z=30,l.add(w),x.setSize(P.width,P.height),x.setPixelRatio(Math.min(window.devicePixelRatio,2)),window.addEventListener("resize",(()=>{P.width=window.innerWidth,P.height=window.innerHeight,w.aspect=P.width/P.height,w.updateProjectionMatrix(),x.setSize(P.width,P.height),x.setPixelRatio(Math.min(window.devicePixelRatio,2))})),window.addEventListener("dblclick",(()=>{document.fullscreenElement?document.exitFullscreen():n.requestFullscreen()}));let E=new class{constructor(e,n,t,o,i,c,r){this.geometry=new THREE.SphereBufferGeometry(i,c,r),this.testGeo=new THREE.BoxGeometry(1,1,1),this.material=new THREE.MeshBasicMaterial({color:"#ff00ff"}),this.position=new THREE.Vector3(e,n,t),this.vel=new THREE.Vector3(.11*Math.random(),.11*Math.random(),0),this.acc=new THREE.Vector3(0,0,0),this.mass=o,this.mesh=new THREE.Mesh(this.testGeo,this.material)}applyForce(e){let n=e;this.acc.add(n)}update(){this.vel.add(this.acc),this.vel.clampScalar(-.09,.09),this.mesh.position.add(this.vel),this.acc.set(0,0,0)}}(0,-.5,0,15,32,16);function T(e,n,t,o,i){return o+(e=(e-n)/(t-n))*(i-o)}l.add(E.mesh),window.addEventListener("pointermove",(function(e){}));const b=new THREE.Clock,R=()=>{const e=b.getElapsedTime();if(a.forEach((n=>{"closed"==n.label&&(h.rotation.x=e,h.rotation.y=e,((e,n,t,o)=>{let i=new THREE.Vector3(n.position.x,n.position.y,.5),c=new THREE.Vector3(e.mesh.position.x,e.mesh.position.y,.5),r=i.sub(c);r.setLength(.17),e.applyForce(r)})(E,h))})),i){var n=new THREE.Vector3(o,-i,.5);n.unproject(w);var t=n.sub(w.position).normalize(),c=-w.position.z/t.z,r=w.position.clone().add(t.multiplyScalar(c));h.position.lerp(r,.2)}E.update(),p.uniforms.uTime.value=b.getElapsedTime(),x.render(l,w),window.requestAnimationFrame(R)};R()})();
//# sourceMappingURL=bundle.59958b342168096b36a4.js.map